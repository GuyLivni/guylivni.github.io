{"version":3,"sources":["webpack:///./src/pages/blog.js","webpack:///./src/components/Seo/Seo.js","webpack:///./src/components/Seo/index.js"],"names":["Header","styled","withConfig","componentId","_ref","theme","css","colors","p600","BlogIndex","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Seo__WEBPACK_IMPORTED_MODULE_3__","title","keywords","React","Component","SEO","description","lang","meta","site","_2417117884","data","metaDescription","siteMetadata","react_default","Helmet_default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired","Seo"],"mappings":"sJAgBMA,EAASC,YAAO,MAAVC,WAAA,CAAAC,YAAA,YAAGF,CAAH,QARS,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OAAeC,YAAf,kFAIVD,EAAME,OAAOC,QAQlBC,4FACJC,OAAA,WAKE,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAM,YACNC,SAAU,yCAEZL,EAAAC,EAAAC,cAACb,EAAD,0BAZgBiB,IAAMC,WAyCfT,+PCjDf,SAASU,EAATf,GAA2D,IAA5CgB,EAA4ChB,EAA5CgB,YAAaC,EAA+BjB,EAA/BiB,KAAMC,EAAyBlB,EAAzBkB,KAAMN,EAAmBZ,EAAnBY,SAAUD,EAASX,EAATW,MACxCQ,EADiDC,EAAAC,KACjDF,KAcFG,EAAkBN,GAAeG,EAAKI,aAAaP,YAEzD,OACEQ,EAAAhB,EAAAC,cAACgB,EAAAjB,EAAD,CACEkB,eAAgB,CACdT,QAEFN,MAAOA,EACPgB,cAAa,QAAUR,EAAKI,aAAaZ,MACzCO,KAAM,CACJ,CACEU,KAAI,cACJC,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAASlB,GAEX,CACEmB,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASV,EAAKI,aAAaQ,QAE7B,CACEH,KAAI,gBACJC,QAASlB,GAEX,CACEiB,KAAI,sBACJC,QAASP,IAGVU,OACCpB,EAASqB,OAAS,EACd,CACEL,KAAI,WACJC,QAASjB,EAASsB,KAAT,OAEX,IAELF,OAAOd,KAKhBH,EAAIoB,aAAe,CACjBlB,KAAI,KACJC,KAAM,GACNN,SAAU,IAGZG,EAAIqB,UAAY,CACdpB,YAAaqB,IAAUC,OACvBrB,KAAMoB,IAAUC,OAChBpB,KAAMmB,IAAUE,MAChB3B,SAAUyB,IAAUG,QAAQH,IAAUC,QACtC3B,MAAO0B,IAAUC,OAAOG,YAGX1B,QC/FA2B","file":"component---src-pages-blog-js-ddeb9b4e25af426db96f.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\n// import { Link, graphql } from \"gatsby\"\n\n// import Bio from \"../components/bio\"\nimport SEO from '../components/Seo';\n// import { rhythm } from \"../styles/typography\"\n\nconst headerStyles = ({ theme }) => css`\n  margin-top: 0;\n  margin-bottom: 1rem;\n  font-size: 3.5rem;\n  color: ${theme.colors.p600};\n  text-align: center;\n`;\n\nconst Header = styled('h1')`\n  ${headerStyles}\n`;\n\nclass BlogIndex extends React.Component {\n  render() {\n    // const { data } = this.props\n    // const siteTitle = data.site.siteMetadata.title\n    // const posts = data.allMarkdownRemark.edges\n\n    return (\n      <div>\n        <SEO\n          title=\"All posts\"\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <Header>Coming Soon!</Header>\n        {/* <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </div>\n          )\n        })} */}\n      </div>\n    );\n  }\n}\n\nexport default BlogIndex;\n\n// export const pageQuery = graphql`\n//   query {\n//     site {\n//       siteMetadata {\n//         title\n//       }\n//     }\n//     allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n//       edges {\n//         node {\n//           excerpt\n//           fields {\n//             slug\n//           }\n//           frontmatter {\n//             date(formatString: \"MMMM DD, YYYY\")\n//             title\n//             description\n//           }\n//         }\n//       }\n//     }\n//   }\n// `\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import Seo from './Seo';\n\nexport default Seo;\n"],"sourceRoot":""}