{"version":3,"sources":["webpack:///./src/utils/typography.js","webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js","webpack:///./src/components/Seo/Seo.js","webpack:///./src/components/Seo/index.js"],"names":["Wordpress2016","overrideThemeStyles","a.gatsby-resp-image-link","boxShadow","googleFonts","typography","Typography","rhythm","scale","bioQuery","Bio","react_default","a","createElement","gatsby_browser_entry","query","render","data","_data$site$siteMetada","site","siteMetadata","author","social","style","display","marginBottom","gatsby_image_default","fixed","avatar","childImageSharp","alt","marginRight","minWidth","borderRadius","imgStyle","href","twitter","_4007731267","BlogPostTemplate","post","this","props","markdownRemark","_this$props$pageConte","pageContext","previous","next","Seo","title","frontmatter","description","excerpt","Object","assign","marginTop","date","dangerouslySetInnerHTML","__html","html","bio","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","React","Component","pageQuery","SEO","_ref","lang","meta","keywords","_2417117884","metaDescription","Helmet_default","htmlAttributes","titleTemplate","name","content","property","concat","length","join","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"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","file":"component---src-templates-blog-post-js-6d9299e630609e4842f8.js","sourcesContent":["import Typography from 'typography';\nimport Wordpress2016 from 'typography-theme-wordpress-2016';\n\nWordpress2016.overrideThemeStyles = () => {\n  return {\n    'a.gatsby-resp-image-link': {\n      boxShadow: `none`,\n    },\n  };\n};\n\ndelete Wordpress2016.googleFonts;\n\nconst typography = new Typography(Wordpress2016);\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles();\n}\n\nexport default typography;\nexport const rhythm = typography.rhythm;\nexport const scale = typography.scale;\n","/**\n * Bio component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Image from 'gatsby-image';\n\nimport { rhythm } from '../utils/typography';\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author, social } = data.site.siteMetadata;\n        return (\n          <div\n            style={{\n              display: `flex`,\n              marginBottom: rhythm(2.5),\n            }}\n          >\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={author}\n              style={{\n                marginRight: rhythm(1 / 2),\n                marginBottom: 0,\n                minWidth: 50,\n                borderRadius: `100%`,\n              }}\n              imgStyle={{\n                borderRadius: `50%`,\n              }}\n            />\n            <p>\n              Written by <strong>{author}</strong> who lives and works in San\n              Francisco building useful things.\n              {` `}\n              <a href={`https://twitter.com/${social.twitter}`}>\n                You should follow him on Twitter\n              </a>\n            </p>\n          </div>\n        );\n      }}\n    />\n  );\n}\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 50, height: 50) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`;\n\nexport default Bio;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Bio from '../components/bio';\nimport SEO from '../components/Seo';\nimport { rhythm, scale } from '../utils/typography';\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark;\n    const { previous, next } = this.props.pageContext;\n\n    return (\n      <div>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <h1>{post.frontmatter.title}</h1>\n        <p\n          style={{\n            ...scale(-1 / 5),\n            display: `block`,\n            marginBottom: rhythm(1),\n            marginTop: rhythm(-1),\n          }}\n        >\n          {post.frontmatter.date}\n        </p>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <Bio />\n\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import Seo from './Seo';\n\nexport default Seo;\n"],"sourceRoot":""}