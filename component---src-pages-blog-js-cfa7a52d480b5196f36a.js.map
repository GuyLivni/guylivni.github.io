{"version":3,"sources":["webpack:///./src/pages/blog.js","webpack:///./src/components/Seo/Seo.js","webpack:///./src/components/Seo/index.js"],"names":["Header","styled","withConfig","componentId","_ref","theme","css","colors","p600","BlogIndex","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Seo__WEBPACK_IMPORTED_MODULE_3__","title","keywords","React","Component","SEO","description","lang","meta","react_default","gatsby_browser_entry","query","_ref2","metadata","contentfulWebsite","metaDescription","Helmet_default","htmlAttributes","titleTemplate","name","content","property","siteUrl","author","concat","length","join","data","_3539420981","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired","Seo"],"mappings":"sJAgBMA,EAASC,YAAO,MAAVC,WAAA,CAAAC,YAAA,YAAGF,CAAH,QARS,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OAAeC,YAAf,kFAIVD,EAAME,OAAOC,QAQlBC,4FACJC,OAAA,WAKE,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAM,YACNC,SAAU,yCAEZL,EAAAC,EAAAC,cAACb,EAAD,0BAZgBiB,IAAMC,WAyCfT,sTCxDf,SAASU,EAATf,GAA2D,IAA5CgB,EAA4ChB,EAA5CgB,YAAaC,EAA+BjB,EAA/BiB,KAAMC,EAAyBlB,EAAzBkB,KAAMN,EAAmBZ,EAAnBY,SAAUD,EAASX,EAATW,MAChD,OACEQ,EAAAX,EAAAC,cAACW,EAAA,EAAD,CACEC,MAAOA,EACPf,OAAQ,SAAAgB,GAA2B,IACzBC,EADyBD,EAAxBE,kBACDD,SACFE,EACJT,GAAeO,EAASP,YAE1B,OACEG,EAAAX,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,eAAgB,CACdV,QAEFN,MAAOA,EACPiB,cAAa,QAAUL,EAASZ,MAChCO,KAAM,CACJ,CACEW,KAAI,cACJC,QAASL,GAEX,CACEM,SAAU,SACVD,QAASP,EAASS,SAEpB,CACED,SAAQ,WACRD,QAASnB,GAEX,CACEoB,SAAQ,iBACRD,QAASL,GAEX,CACEM,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASP,EAASU,QAEpB,CACEJ,KAAI,gBACJC,QAASnB,GAEX,CACEkB,KAAI,sBACJC,QAASL,IAGVS,OACCtB,EAASuB,OAAS,EACd,CACEN,KAAI,WACJC,QAASlB,EAASwB,KAAT,OAEX,IAELF,OAAOhB,MA5DlBmB,KAAAC,IAoEJvB,EAAIwB,aAAe,CACjBtB,KAAI,KACJC,KAAM,GACNN,SAAU,IAGZG,EAAIyB,UAAY,CACdxB,YAAayB,IAAUC,OACvBzB,KAAMwB,IAAUC,OAChBxB,KAAMuB,IAAUE,MAChB/B,SAAU6B,IAAUG,QAAQH,IAAUC,QACtC/B,MAAO8B,IAAUC,OAAOG,YAGX9B,QAETM,EAAK,aCzFIyB","file":"component---src-pages-blog-js-cfa7a52d480b5196f36a.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\n// import { Link, graphql } from \"gatsby\"\n\n// import Bio from \"../components/bio\"\nimport SEO from '../components/Seo';\n// import { rhythm } from \"../styles/typography\"\n\nconst headerStyles = ({ theme }) => css`\n  margin-top: 0;\n  margin-bottom: 1rem;\n  font-size: 3.5rem;\n  color: ${theme.colors.p600};\n  text-align: center;\n`;\n\nconst Header = styled('h1')`\n  ${headerStyles}\n`;\n\nclass BlogIndex extends React.Component {\n  render() {\n    // const { data } = this.props\n    // const siteTitle = data.site.siteMetadata.title\n    // const posts = data.allMarkdownRemark.edges\n\n    return (\n      <div>\n        <SEO\n          title=\"All posts\"\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <Header>Coming Soon!</Header>\n        {/* <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </div>\n          )\n        })} */}\n      </div>\n    );\n  }\n}\n\nexport default BlogIndex;\n\n// export const pageQuery = graphql`\n//   query {\n//     site {\n//       siteMetadata {\n//         title\n//       }\n//     }\n//     allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n//       edges {\n//         node {\n//           excerpt\n//           fields {\n//             slug\n//           }\n//           frontmatter {\n//             date(formatString: \"MMMM DD, YYYY\")\n//             title\n//             description\n//           }\n//         }\n//       }\n//     }\n//   }\n// `\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={({ contentfulWebsite }) => {\n        const { metadata } = contentfulWebsite;\n        const metaDescription =\n          description || metadata.description;\n\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${metadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: metadata.siteUrl,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: metadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n\nconst query = graphql`\n  query {\n    contentfulWebsite(name: { eq: \"Site\" }) {\n      metadata {\n        title\n        author\n        description\n        siteUrl\n      }\n    }\n  }\n`;\n","import Seo from './Seo';\n\nexport default Seo;\n"],"sourceRoot":""}